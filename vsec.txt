#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <omp.h>

#define LOW_LIMIT 1000000
#define HIGH_LIMIT 1025000

#define MAXPRIMOS 1837

int esprimo(int);

int main(int argc, char* argv[])
{
    int contador = 0,
        iterador = 0,
        *primo_lista = (int*) malloc(MAXPRIMOS * sizeof(int)); // (1)
    assert(primo_lista != NULL); // Asegurarse que 'primo_lista' obtenga memoria para almacenar los datos.

    double start_time = omp_get_wtime(); // Iniciar conteo de tiempo

    #pragma omp parallel for reduction(+:contador)
    for (int i = LOW_LIMIT; i <= HIGH_LIMIT; i++)
    {
        if (esprimo(i))
        {
            primo_lista[iterador++] = i;
            contador++;
            printf("Primo %d -> %d\n", contador, i); // (2) Imprimir los numeros primos encontrados y su posici√≥n
        }
    }

    double end_time = omp_get_wtime(); // Finalizar conteo de tiempo

    // (3) Imprimir el numero de primos encontrados
    printf("Numero de primos encontrados: %d\n", contador);

    // (4) Imprimir el tiempo que tomo ejecutar el ciclo 'for'
    printf("Tiempo de ejecucion: %f segundos\n", end_time - start_time);

    free(primo_lista);
    return 0;
}

int esprimo(int n)
{
    // (5) Escribir en C el algoritmo para determinar si un numero es primo o no
    int mitad = n / 2;
    for (int i = 2; i <= mitad; i++)
    {
        if (n % i == 0)
        {
            return 0; // no es primo
        }
    }
    return 1; // es primo
}